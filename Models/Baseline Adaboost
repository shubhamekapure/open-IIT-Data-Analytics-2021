{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Baseline Adaboost","provenance":[{"file_id":"1fWrMRaNL7m6NXmn85Yp0nvFHZ8wBWQM3","timestamp":1616057139026}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"WaOe-nuka_8b"},"source":["Put a shortcut of the main drive link to your my drive so that the path remains the same for everyone\r\n"]},{"cell_type":"code","metadata":{"id":"qltkp5RHcuYV","executionInfo":{"status":"ok","timestamp":1616087973402,"user_tz":-330,"elapsed":1474,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["import pandas as pd\r\n","import numpy as np\r\n","from sklearn.model_selection import train_test_split"],"execution_count":62,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B4Abd9gnb-bW","executionInfo":{"status":"ok","timestamp":1616087973405,"user_tz":-330,"elapsed":1467,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"29da6da3-f264-4c72-d294-fae7b7893758"},"source":["from google.colab import drive\n","drive.mount('/gdrive')"],"execution_count":63,"outputs":[{"output_type":"stream","text":["Drive already mounted at /gdrive; to attempt to forcibly remount, call drive.mount(\"/gdrive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XjTLNcBta82w","executionInfo":{"status":"ok","timestamp":1616087973406,"user_tz":-330,"elapsed":1460,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["data_path = '/gdrive/MyDrive/Open IIT DA 2021/Dataset/'\r\n","result_path = '/gdrive/MyDrive/Open IIT DA 2021/'\r\n","model_name = 'baseline AdaBoost'"],"execution_count":64,"outputs":[]},{"cell_type":"code","metadata":{"id":"5uoc8HT-bhxf","executionInfo":{"status":"ok","timestamp":1616087975693,"user_tz":-330,"elapsed":3741,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["train = pd.read_csv(data_path + 'Train_data_3.csv')\r\n","test = pd.read_csv(data_path + 'Test_data_3.csv') "],"execution_count":65,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3YULylSLbiMd"},"source":["# custom loss and metrics\r\n"]},{"cell_type":"code","metadata":{"id":"eK0skU4Tao3a","executionInfo":{"status":"ok","timestamp":1616087975694,"user_tz":-330,"elapsed":3738,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["popularity_mapper = {\r\n","                        'Very high': 5,\r\n","                        'high': 4,\r\n","                        'average': 3, \r\n","                        'low': 2, \r\n","                        'very low': 1\r\n","                     }\r\n","#\r\n","#\r\n","#\r\n","#\r\n","# check with no_bid = base**(-2), base**(-1), 1, base**(5), base**(6)\r\n","#\r\n","#\r\n","\r\n","def custom_loss_function(y_pred, y_true, **kwargs):\r\n","    # kwargs contain additional parameters\r\n","    # kwargs should ideally contain - \r\n","        # 1. base: an integer  \r\n","            # on which base you want to take the loss \r\n","        # 2. no_bid: an array (one entry for each class) of penalty for no bid \r\n","            # the amount of penalty you want to add to the loss \r\n","            # this is applicable in scenarios such as - when actual is average but you bid less than average (say low)\r\n","            # each class should be penalised differently - say actual is very high and your prediction was unable to bid - you loss straight 10K $\r\n","            # but say it was low and you predicted very low - it was mere 4K $ that you lost \r\n","\r\n","    # base is close to 1 - so that the total_loss does not explode :(\r\n","    base, no_bid = 1.1, None\r\n","    no_bid_updated = False\r\n","\r\n","    # stuffs with kwarg dictionary\r\n","    for key, value in list(kwargs.items()):\r\n","        if key == 'base':\r\n","            # update the base\r\n","            base = value\r\n","        elif key == 'no_bid':\r\n","            # update the no_bid array\r\n","            no_bid = value \r\n","            no_bid_updated = True\r\n","        else:\r\n","            # none of the required keys\r\n","            print('Chutiya bana rahe ho? :|\\n')\r\n","    \r\n","    # update no_bid finally if the no_bid has not been updated\r\n","    if not no_bid_updated:\r\n","        no_bid = [base**(i+1) for i in range(5)]\r\n","\r\n","    # now convert the popularity predictions into numbers\r\n","    converted_pred = [popularity_mapper[x] for x in y_pred]  \r\n","    converted_true = [popularity_mapper[x] for x in y_true]\r\n","\r\n","    # find the loss that you have incurred \r\n","    # there is loss incurred only if we have a different prediction than the actual popularity\r\n","    converted_pred_len = len(converted_pred)\r\n","    loss_array = [0] * converted_pred_len \r\n","    for i in range(converted_pred_len):\r\n","        if converted_pred[i] != converted_true[i]:\r\n","\r\n","            # first check if this is a no_bid situation\r\n","            if converted_true[i] > converted_pred[i]:\r\n","                loss_array[i] = no_bid[converted_bid[i] - 1]\r\n","\r\n","            else:\r\n","                actual_gain = converted_true[i]\r\n","                our_gain = (2 * actual_gain - converted_pred[i])\r\n","                loss_array[i] = base**(actual_gain - our_gain)\r\n","\r\n","    total_loss = sum(loss_array)\r\n","    return total_loss"],"execution_count":66,"outputs":[]},{"cell_type":"code","metadata":{"id":"b8IWvoWma2Kv","executionInfo":{"status":"ok","timestamp":1616087975695,"user_tz":-330,"elapsed":3734,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["def revenue(Y_test, Y_pred):\r\n","  Y_test = Y_test.to_numpy()\r\n","  revenue = 10000\r\n","  i = 0\r\n","  while i < len(Y_test) and revenue >= 0:\r\n","    if Y_test[i] <= Y_pred[i]:\r\n","      revenue += Y_test[i]*2 - Y_pred[i]\r\n","    i += 1\r\n","  return revenue "],"execution_count":67,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GfvWXPlabl5l"},"source":["# models\r\n"]},{"cell_type":"code","metadata":{"id":"MVtjh60mpCmq","executionInfo":{"status":"ok","timestamp":1616087975697,"user_tz":-330,"elapsed":3731,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["from numpy import mean\r\n","from numpy import std\r\n","from numpy import dstack\r\n","from pandas import read_csv\r\n","from matplotlib import pyplot\r\n","from sklearn.metrics import classification_report\r\n","from sklearn.metrics import f1_score, accuracy_score\r\n"],"execution_count":68,"outputs":[]},{"cell_type":"code","metadata":{"id":"09aPD7MBbqeu","executionInfo":{"status":"ok","timestamp":1616087975698,"user_tz":-330,"elapsed":3728,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["X = train.drop(['popularity'],axis=1)\r\n","y = train['popularity']\r\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=4000/len(X), random_state=69)"],"execution_count":69,"outputs":[]},{"cell_type":"code","metadata":{"id":"XR6tpGbFj_Mb","executionInfo":{"status":"ok","timestamp":1616087975699,"user_tz":-330,"elapsed":3724,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["#adaboost\r\n","from sklearn.ensemble import AdaBoostClassifier\r\n","clf = AdaBoostClassifier(n_estimators=4, random_state=0, algorithm='SAMME')"],"execution_count":70,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R-jySq2Cm84O","executionInfo":{"status":"ok","timestamp":1616087975700,"user_tz":-330,"elapsed":3721,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"23794f4d-f9f4-419f-816e-084478dfd84b"},"source":["clf.fit(X_train, y_train)"],"execution_count":71,"outputs":[{"output_type":"execute_result","data":{"text/plain":["AdaBoostClassifier(algorithm='SAMME', base_estimator=None, learning_rate=1.0,\n","                   n_estimators=4, random_state=0)"]},"metadata":{"tags":[]},"execution_count":71}]},{"cell_type":"code","metadata":{"id":"zqCg5UlYrK2M","executionInfo":{"status":"ok","timestamp":1616087975702,"user_tz":-330,"elapsed":3716,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["y_pred = clf.predict(X_test)"],"execution_count":72,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q9xU_HBmrRAy","executionInfo":{"status":"ok","timestamp":1616087975702,"user_tz":-330,"elapsed":3712,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"b6bf3eaf-7694-44ac-e9fa-cf2250dcae50"},"source":["print(classification_report(y_test, y_pred))"],"execution_count":73,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           1       0.83      0.69      0.75       800\n","           2       0.52      0.05      0.09       825\n","           3       0.34      0.96      0.50       774\n","           4       0.00      0.00      0.00       764\n","           5       0.73      0.93      0.82       837\n","\n","    accuracy                           0.53      4000\n","   macro avg       0.48      0.53      0.43      4000\n","weighted avg       0.49      0.53      0.44      4000\n","\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W14A_RV9uhBq","executionInfo":{"status":"ok","timestamp":1616087975702,"user_tz":-330,"elapsed":3706,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"e17ab7de-68f5-4ef7-902c-2d04c64319ef"},"source":["print(f1_score(y_test,y_pred,average='weighted'))\r\n","f1 = f1_score(y_test,y_pred,average='weighted')"],"execution_count":74,"outputs":[{"output_type":"stream","text":["0.43761817761890814\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TjsAH_WXL1tf","executionInfo":{"status":"ok","timestamp":1616087975703,"user_tz":-330,"elapsed":3702,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"74ca471c-28be-47e8-a055-aa19225c6a57"},"source":["print(accuracy_score(y_test,y_pred))\r\n","acc = accuracy_score(y_test,y_pred)"],"execution_count":75,"outputs":[{"output_type":"stream","text":["0.52875\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WbUPj_XurPjL","executionInfo":{"status":"ok","timestamp":1616087975704,"user_tz":-330,"elapsed":3698,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"58022888-a6ad-46e8-b533-73590bc21dfa"},"source":["print(revenue(y_test, y_pred))\r\n","custom = revenue(y_test, y_pred)"],"execution_count":76,"outputs":[{"output_type":"stream","text":["17673\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xYh5CgMAy_eJ","executionInfo":{"status":"ok","timestamp":1616087975704,"user_tz":-330,"elapsed":3694,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"34a9c29d-b367-400e-8810-b07ff66f50c8"},"source":["max_revenue = 0\r\n","y_test = y_test.to_numpy()\r\n","for i in range(len(y_test)):\r\n","  max_revenue += y_test[i]\r\n","max_revenue += 10000\r\n","print(max_revenue)"],"execution_count":77,"outputs":[{"output_type":"stream","text":["22013\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"07eRRHJkssDb"},"source":["# save model"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7mInQ1eatnQy","executionInfo":{"status":"ok","timestamp":1616087983992,"user_tz":-330,"elapsed":11977,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"3f40e579-d688-46e2-9622-67a33f5eb2fe"},"source":["!pip install xlsxwriter\r\n","!pip install xlrd\r\n","!pip install openpyxl"],"execution_count":78,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: xlsxwriter in /usr/local/lib/python3.7/dist-packages (1.3.7)\n","Requirement already satisfied: xlrd in /usr/local/lib/python3.7/dist-packages (1.1.0)\n","Requirement already satisfied: openpyxl in /usr/local/lib/python3.7/dist-packages (2.5.9)\n","Requirement already satisfied: et-xmlfile in /usr/local/lib/python3.7/dist-packages (from openpyxl) (1.0.1)\n","Requirement already satisfied: jdcal in /usr/local/lib/python3.7/dist-packages (from openpyxl) (1.4.1)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"bhrw_bNssIaz","colab":{"base_uri":"https://localhost:8080/","height":54},"executionInfo":{"status":"ok","timestamp":1616087983997,"user_tz":-330,"elapsed":11975,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"1d79cfb5-ed6e-4e8a-df62-b671a37c4ba2"},"source":["\r\n","\"\"\"writer = pd.ExcelWriter(result_path + 'results.xlsx', engine='xlsxwriter')\r\n","df = pd.DataFrame(columns=['Model name','F1 Score','custom metric score'])\r\n","df.to_excel(writer, sheet_name='Sheet1', index=False)\r\n","writer.save()\r\n","\"\"\""],"execution_count":79,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["\"writer = pd.ExcelWriter(result_path + 'results.xlsx', engine='xlsxwriter')\\ndf = pd.DataFrame(columns=['Model name','F1 Score','custom metric score'])\\ndf.to_excel(writer, sheet_name='Sheet1', index=False)\\nwriter.save()\\n\""]},"metadata":{"tags":[]},"execution_count":79}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"QWGPx9fItZhS","executionInfo":{"status":"ok","timestamp":1616087985607,"user_tz":-330,"elapsed":13579,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"4a881cf4-aee0-441b-d937-b957288d6aa9"},"source":["# run this cell without any changes only once\r\n","reader = pd.read_excel(result_path + 'results.xlsx')\r\n","reader = reader.append({'Model name':model_name, 'F1 Score': f1,'Accuracy': acc, 'custom metric score': custom},ignore_index=True)\r\n","writer = pd.ExcelWriter(result_path + 'results.xlsx', engine='xlsxwriter')\r\n","reader.to_excel(writer, sheet_name='Sheet1', index=False)\r\n","writer.save()\r\n","reader"],"execution_count":80,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model name</th>\n","      <th>F1 Score</th>\n","      <th>Accuracy</th>\n","      <th>custom metric score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>baseline LightGBM</td>\n","      <td>0.686242</td>\n","      <td>0.68600</td>\n","      <td>18952</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>baseline random forest</td>\n","      <td>0.722943</td>\n","      <td>0.72250</td>\n","      <td>19352</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>baseline AdaBoost</td>\n","      <td>0.435260</td>\n","      <td>0.52825</td>\n","      <td>17746</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>baseline GradientBoost</td>\n","      <td>0.667322</td>\n","      <td>0.66850</td>\n","      <td>18729</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>baseline CatBoost</td>\n","      <td>0.680307</td>\n","      <td>0.68225</td>\n","      <td>[18871]</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>baseline LightGBM</td>\n","      <td>0.697761</td>\n","      <td>0.69650</td>\n","      <td>19029</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>baseline random forest</td>\n","      <td>0.711836</td>\n","      <td>0.71100</td>\n","      <td>19150</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>baseline AdaBoost</td>\n","      <td>0.437618</td>\n","      <td>0.52875</td>\n","      <td>17673</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["               Model name  F1 Score  Accuracy custom metric score\n","0       baseline LightGBM  0.686242   0.68600               18952\n","1  baseline random forest  0.722943   0.72250               19352\n","2       baseline AdaBoost  0.435260   0.52825               17746\n","3  baseline GradientBoost  0.667322   0.66850               18729\n","4       baseline CatBoost  0.680307   0.68225             [18871]\n","5       baseline LightGBM  0.697761   0.69650               19029\n","6  baseline random forest  0.711836   0.71100               19150\n","7       baseline AdaBoost  0.437618   0.52875               17673"]},"metadata":{"tags":[]},"execution_count":80}]},{"cell_type":"code","metadata":{"id":"iLGO1eK8jPRx","colab":{"base_uri":"https://localhost:8080/","height":336},"executionInfo":{"status":"ok","timestamp":1616087985613,"user_tz":-330,"elapsed":13579,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"97c3ff35-0bfd-4269-c2f0-4715940325c4"},"source":["import matplotlib.pyplot as plt\r\n","\r\n","def count_hist(y_pred, y_test):\r\n","\r\n","  ''' This function display the count of the actual class labels for \r\n","      each type of the predicted class labels '''\r\n","  \r\n","  fig, ax = plt.subplots(1, 5, figsize = (20, 5))\r\n","\r\n","  class_labels = np.array([1, 2, 3, 4, 5])\r\n","  y_test = np.array(y_test)\r\n","  count_1 = np.zeros(5, dtype = np.int32)\r\n","  count_2 = np.zeros(5, dtype = np.int32)\r\n","  count_3 = np.zeros(5, dtype = np.int32)\r\n","  count_4 = np.zeros(5, dtype = np.int32)\r\n","  count_5 = np.zeros(5, dtype = np.int32)\r\n","\r\n","  for i in range(len(y_pred)):\r\n","\r\n","    if y_pred[i] == 1:\r\n","      count_1[y_test[i] - 1] = count_1[y_test[i] - 1] + 1\r\n","    if y_pred[i] == 2:\r\n","      count_2[y_test[i] - 1] = count_2[y_test[i] - 1] + 1\r\n","    if y_pred[i] == 3:\r\n","      count_3[y_test[i] - 1] = count_3[y_test[i] - 1] + 1\r\n","    if y_pred[i] == 4:\r\n","      count_4[y_test[i] - 1] = count_4[y_test[i] - 1] + 1\r\n","    if y_pred[i] == 5:\r\n","      count_5[y_test[i] - 1] = count_5[y_test[i] - 1] + 1\r\n","\r\n","  ax[0].bar(class_labels, count_1)\r\n","  ax[0].set_title(\"Counts for predicted class 1\")\r\n","  \r\n","  ax[1].bar(class_labels, count_2)\r\n","  ax[1].set_title(\"Counts for predicted class 2\")\r\n","\r\n","  ax[2].bar(class_labels, count_3)\r\n","  ax[2].set_title(\"Counts for predicted class 3\")\r\n","\r\n","  ax[3].bar(class_labels, count_4)\r\n","  ax[3].set_title(\"Counts for predicted class 4\")\r\n","\r\n","  ax[4].bar(class_labels, count_5)\r\n","  ax[4].set_title(\"Counts for predicted class 5\")\r\n","\r\n","  plt.show()\r\n","\r\n","count_hist(y_pred, y_test)"],"execution_count":81,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x360 with 5 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"HEraAwBHkY88","executionInfo":{"status":"ok","timestamp":1616087985617,"user_tz":-330,"elapsed":13578,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":[""],"execution_count":81,"outputs":[]}]}