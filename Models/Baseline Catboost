{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Baseline Catboost","provenance":[{"file_id":"1y1UyXQgM-2kCxHhEayQ_E6dRfGtNwccm","timestamp":1616058126605},{"file_id":"1fWrMRaNL7m6NXmn85Yp0nvFHZ8wBWQM3","timestamp":1616057139026}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"WaOe-nuka_8b"},"source":["Put a shortcut of the main drive link to your my drive so that the path remains the same for everyone\r\n"]},{"cell_type":"code","metadata":{"id":"qltkp5RHcuYV","executionInfo":{"status":"ok","timestamp":1616088110906,"user_tz":-330,"elapsed":1542,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["import pandas as pd\r\n","import numpy as np\r\n","from sklearn.model_selection import train_test_split"],"execution_count":66,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B4Abd9gnb-bW","executionInfo":{"status":"ok","timestamp":1616088110910,"user_tz":-330,"elapsed":1536,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"17ac46fa-ca3a-41bd-9bfa-ba4798266e14"},"source":["from google.colab import drive\n","drive.mount('/gdrive')"],"execution_count":67,"outputs":[{"output_type":"stream","text":["Drive already mounted at /gdrive; to attempt to forcibly remount, call drive.mount(\"/gdrive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XjTLNcBta82w","executionInfo":{"status":"ok","timestamp":1616088110913,"user_tz":-330,"elapsed":1530,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["data_path = '/gdrive/MyDrive/Open IIT DA 2021/Dataset/'\r\n","result_path = '/gdrive/MyDrive/Open IIT DA 2021/'\r\n","model_name = 'baseline CatBoost'"],"execution_count":68,"outputs":[]},{"cell_type":"code","metadata":{"id":"5uoc8HT-bhxf","executionInfo":{"status":"ok","timestamp":1616088112499,"user_tz":-330,"elapsed":3110,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["train = pd.read_csv(data_path + 'Train_data_3.csv')\r\n","test = pd.read_csv(data_path + 'Test_data_3.csv') "],"execution_count":69,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3YULylSLbiMd"},"source":["# custom loss and metrics\r\n"]},{"cell_type":"code","metadata":{"id":"eK0skU4Tao3a","executionInfo":{"status":"ok","timestamp":1616088112515,"user_tz":-330,"elapsed":3122,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["popularity_mapper = {\r\n","                        'Very high': 5,\r\n","                        'high': 4,\r\n","                        'average': 3, \r\n","                        'low': 2, \r\n","                        'very low': 1\r\n","                     }\r\n","#\r\n","#\r\n","#\r\n","#\r\n","# check with no_bid = base**(-2), base**(-1), 1, base**(5), base**(6)\r\n","#\r\n","#\r\n","\r\n","def custom_loss_function(y_pred, y_true, **kwargs):\r\n","    # kwargs contain additional parameters\r\n","    # kwargs should ideally contain - \r\n","        # 1. base: an integer  \r\n","            # on which base you want to take the loss \r\n","        # 2. no_bid: an array (one entry for each class) of penalty for no bid \r\n","            # the amount of penalty you want to add to the loss \r\n","            # this is applicable in scenarios such as - when actual is average but you bid less than average (say low)\r\n","            # each class should be penalised differently - say actual is very high and your prediction was unable to bid - you loss straight 10K $\r\n","            # but say it was low and you predicted very low - it was mere 4K $ that you lost \r\n","\r\n","    # base is close to 1 - so that the total_loss does not explode :(\r\n","    base, no_bid = 1.1, None\r\n","    no_bid_updated = False\r\n","\r\n","    # stuffs with kwarg dictionary\r\n","    for key, value in list(kwargs.items()):\r\n","        if key == 'base':\r\n","            # update the base\r\n","            base = value\r\n","        elif key == 'no_bid':\r\n","            # update the no_bid array\r\n","            no_bid = value \r\n","            no_bid_updated = True\r\n","        else:\r\n","            # none of the required keys\r\n","            print('Chutiya bana rahe ho? :|\\n')\r\n","    \r\n","    # update no_bid finally if the no_bid has not been updated\r\n","    if not no_bid_updated:\r\n","        no_bid = [base**(i+1) for i in range(5)]\r\n","\r\n","    # now convert the popularity predictions into numbers\r\n","    converted_pred = [popularity_mapper[x] for x in y_pred]  \r\n","    converted_true = [popularity_mapper[x] for x in y_true]\r\n","\r\n","    # find the loss that you have incurred \r\n","    # there is loss incurred only if we have a different prediction than the actual popularity\r\n","    converted_pred_len = len(converted_pred)\r\n","    loss_array = [0] * converted_pred_len \r\n","    for i in range(converted_pred_len):\r\n","        if converted_pred[i] != converted_true[i]:\r\n","\r\n","            # first check if this is a no_bid situation\r\n","            if converted_true[i] > converted_pred[i]:\r\n","                loss_array[i] = no_bid[converted_bid[i] - 1]\r\n","\r\n","            else:\r\n","                actual_gain = converted_true[i]\r\n","                our_gain = (2 * actual_gain - converted_pred[i])\r\n","                loss_array[i] = base**(actual_gain - our_gain)\r\n","\r\n","    total_loss = sum(loss_array)\r\n","    return total_loss"],"execution_count":70,"outputs":[]},{"cell_type":"code","metadata":{"id":"b8IWvoWma2Kv","executionInfo":{"status":"ok","timestamp":1616088112517,"user_tz":-330,"elapsed":3120,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["def revenue(Y_test, Y_pred):\r\n","  Y_test = Y_test.to_numpy()\r\n","  revenue = 10000\r\n","  i = 0\r\n","  while i < len(Y_test) and revenue >= 0:\r\n","    if Y_test[i] <= Y_pred[i]:\r\n","      revenue += Y_test[i]*2 - Y_pred[i]\r\n","    i += 1\r\n","  return revenue "],"execution_count":71,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GfvWXPlabl5l"},"source":["# models\r\n"]},{"cell_type":"code","metadata":{"id":"MVtjh60mpCmq","executionInfo":{"status":"ok","timestamp":1616088112522,"user_tz":-330,"elapsed":3120,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["from numpy import mean\r\n","from numpy import std\r\n","from numpy import dstack\r\n","from pandas import read_csv\r\n","from matplotlib import pyplot\r\n","from sklearn.metrics import classification_report\r\n","from sklearn.metrics import f1_score, accuracy_score\r\n"],"execution_count":72,"outputs":[]},{"cell_type":"code","metadata":{"id":"09aPD7MBbqeu","executionInfo":{"status":"ok","timestamp":1616088112525,"user_tz":-330,"elapsed":3119,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["X = train.drop(['popularity'],axis=1)\r\n","y = train['popularity']\r\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=4000/len(X), random_state=69)"],"execution_count":73,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IHChEcxRl0fU","executionInfo":{"status":"ok","timestamp":1616088115300,"user_tz":-330,"elapsed":5889,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"473309dd-ecc4-40cd-989d-064b9c8cb418"},"source":["pip install catboost"],"execution_count":74,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: catboost in /usr/local/lib/python3.7/dist-packages (0.24.4)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from catboost) (1.15.0)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.7/dist-packages (from catboost) (4.4.1)\n","Requirement already satisfied: graphviz in /usr/local/lib/python3.7/dist-packages (from catboost) (0.10.1)\n","Requirement already satisfied: pandas>=0.24.0 in /usr/local/lib/python3.7/dist-packages (from catboost) (1.1.5)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from catboost) (1.4.1)\n","Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.7/dist-packages (from catboost) (1.19.5)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from catboost) (3.2.2)\n","Requirement already satisfied: retrying>=1.3.3 in /usr/local/lib/python3.7/dist-packages (from plotly->catboost) (1.3.3)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->catboost) (2.8.1)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->catboost) (2018.9)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (1.3.1)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (2.4.7)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (0.10.0)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XR6tpGbFj_Mb","executionInfo":{"status":"ok","timestamp":1616088115304,"user_tz":-330,"elapsed":5888,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["from catboost import CatBoostClassifier\r\n","clf = CatBoostClassifier(iterations=50)"],"execution_count":75,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R-jySq2Cm84O","executionInfo":{"status":"ok","timestamp":1616088116590,"user_tz":-330,"elapsed":7169,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"0c501ad0-3676-47e8-d407-f8961ecfa538"},"source":["clf.fit(X_train, y_train)"],"execution_count":76,"outputs":[{"output_type":"stream","text":["Learning rate set to 0.5\n","0:\tlearn: 1.0842500\ttotal: 40.1ms\tremaining: 1.97s\n","1:\tlearn: 0.9643340\ttotal: 74.5ms\tremaining: 1.79s\n","2:\tlearn: 0.8977486\ttotal: 109ms\tremaining: 1.71s\n","3:\tlearn: 0.8668037\ttotal: 143ms\tremaining: 1.65s\n","4:\tlearn: 0.8326788\ttotal: 177ms\tremaining: 1.59s\n","5:\tlearn: 0.8143201\ttotal: 216ms\tremaining: 1.58s\n","6:\tlearn: 0.8005970\ttotal: 249ms\tremaining: 1.53s\n","7:\tlearn: 0.7865060\ttotal: 298ms\tremaining: 1.56s\n","8:\tlearn: 0.7791236\ttotal: 331ms\tremaining: 1.51s\n","9:\tlearn: 0.7687908\ttotal: 365ms\tremaining: 1.46s\n","10:\tlearn: 0.7587479\ttotal: 400ms\tremaining: 1.42s\n","11:\tlearn: 0.7483195\ttotal: 437ms\tremaining: 1.38s\n","12:\tlearn: 0.7387735\ttotal: 476ms\tremaining: 1.35s\n","13:\tlearn: 0.7351183\ttotal: 509ms\tremaining: 1.31s\n","14:\tlearn: 0.7290380\ttotal: 542ms\tremaining: 1.26s\n","15:\tlearn: 0.7247245\ttotal: 574ms\tremaining: 1.22s\n","16:\tlearn: 0.7190520\ttotal: 614ms\tremaining: 1.19s\n","17:\tlearn: 0.7133760\ttotal: 654ms\tremaining: 1.16s\n","18:\tlearn: 0.7075281\ttotal: 687ms\tremaining: 1.12s\n","19:\tlearn: 0.7030890\ttotal: 721ms\tremaining: 1.08s\n","20:\tlearn: 0.6984539\ttotal: 754ms\tremaining: 1.04s\n","21:\tlearn: 0.6926091\ttotal: 787ms\tremaining: 1s\n","22:\tlearn: 0.6871900\ttotal: 821ms\tremaining: 964ms\n","23:\tlearn: 0.6817914\ttotal: 860ms\tremaining: 931ms\n","24:\tlearn: 0.6761619\ttotal: 894ms\tremaining: 894ms\n","25:\tlearn: 0.6719195\ttotal: 932ms\tremaining: 860ms\n","26:\tlearn: 0.6668278\ttotal: 966ms\tremaining: 823ms\n","27:\tlearn: 0.6622742\ttotal: 1s\tremaining: 786ms\n","28:\tlearn: 0.6570118\ttotal: 1.04s\tremaining: 750ms\n","29:\tlearn: 0.6525872\ttotal: 1.07s\tremaining: 715ms\n","30:\tlearn: 0.6501643\ttotal: 1.11s\tremaining: 679ms\n","31:\tlearn: 0.6462177\ttotal: 1.15s\tremaining: 644ms\n","32:\tlearn: 0.6420406\ttotal: 1.18s\tremaining: 607ms\n","33:\tlearn: 0.6385590\ttotal: 1.21s\tremaining: 571ms\n","34:\tlearn: 0.6353430\ttotal: 1.25s\tremaining: 535ms\n","35:\tlearn: 0.6312289\ttotal: 1.29s\tremaining: 500ms\n","36:\tlearn: 0.6268595\ttotal: 1.33s\tremaining: 467ms\n","37:\tlearn: 0.6237050\ttotal: 1.36s\tremaining: 431ms\n","38:\tlearn: 0.6197866\ttotal: 1.4s\tremaining: 396ms\n","39:\tlearn: 0.6168686\ttotal: 1.44s\tremaining: 359ms\n","40:\tlearn: 0.6114463\ttotal: 1.47s\tremaining: 323ms\n","41:\tlearn: 0.6081471\ttotal: 1.51s\tremaining: 287ms\n","42:\tlearn: 0.6052677\ttotal: 1.54s\tremaining: 251ms\n","43:\tlearn: 0.6022176\ttotal: 1.58s\tremaining: 215ms\n","44:\tlearn: 0.5995978\ttotal: 1.62s\tremaining: 180ms\n","45:\tlearn: 0.5961648\ttotal: 1.65s\tremaining: 144ms\n","46:\tlearn: 0.5934237\ttotal: 1.69s\tremaining: 108ms\n","47:\tlearn: 0.5912824\ttotal: 1.72s\tremaining: 71.8ms\n","48:\tlearn: 0.5872204\ttotal: 1.76s\tremaining: 35.9ms\n","49:\tlearn: 0.5837135\ttotal: 1.79s\tremaining: 0us\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<catboost.core.CatBoostClassifier at 0x7f028c777e50>"]},"metadata":{"tags":[]},"execution_count":76}]},{"cell_type":"code","metadata":{"id":"zqCg5UlYrK2M","executionInfo":{"status":"ok","timestamp":1616088117477,"user_tz":-330,"elapsed":8050,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["y_pred = clf.predict(X_test)"],"execution_count":77,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q9xU_HBmrRAy","executionInfo":{"status":"ok","timestamp":1616088117481,"user_tz":-330,"elapsed":8051,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"b9c934de-32f4-4370-f5af-30726d381257"},"source":["print(classification_report(y_test, y_pred))"],"execution_count":78,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           1       0.81      0.82      0.82       800\n","           2       0.58      0.63      0.60       825\n","           3       0.49      0.48      0.48       774\n","           4       0.60      0.54      0.57       764\n","           5       0.89      0.90      0.90       837\n","\n","    accuracy                           0.68      4000\n","   macro avg       0.67      0.67      0.67      4000\n","weighted avg       0.68      0.68      0.68      4000\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W14A_RV9uhBq","executionInfo":{"status":"ok","timestamp":1616088117484,"user_tz":-330,"elapsed":8048,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"59563ca8-e214-4877-e4f1-c8489f5deb31"},"source":["print(f1_score(y_test,y_pred,average='weighted'))\r\n","f1 = f1_score(y_test,y_pred,average='weighted')"],"execution_count":79,"outputs":[{"output_type":"stream","text":["0.6765829873075503\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dyNKi_lWNTSu","executionInfo":{"status":"ok","timestamp":1616088117487,"user_tz":-330,"elapsed":8046,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"d6fd4c68-f940-4c34-9dd6-baba48c7eff7"},"source":["print(accuracy_score(y_test,y_pred))\r\n","acc = accuracy_score(y_test,y_pred)"],"execution_count":80,"outputs":[{"output_type":"stream","text":["0.67775\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WbUPj_XurPjL","executionInfo":{"status":"ok","timestamp":1616088117489,"user_tz":-330,"elapsed":8044,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"cf73a43b-7327-458d-efe0-ee7001d0a7cf"},"source":["print(revenue(y_test, y_pred))\r\n","custom = revenue(y_test, y_pred)"],"execution_count":81,"outputs":[{"output_type":"stream","text":["[18819]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xYh5CgMAy_eJ","executionInfo":{"status":"ok","timestamp":1616088117493,"user_tz":-330,"elapsed":8043,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"a1f37649-775e-4a91-834d-e1b4fac255a1"},"source":["max_revenue = 0\r\n","y_test = y_test.to_numpy()\r\n","for i in range(len(y_test)):\r\n","  max_revenue += y_test[i]\r\n","max_revenue += 10000\r\n","print(max_revenue)"],"execution_count":82,"outputs":[{"output_type":"stream","text":["22013\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"07eRRHJkssDb"},"source":["# save model"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7mInQ1eatnQy","executionInfo":{"status":"ok","timestamp":1616088124975,"user_tz":-330,"elapsed":15519,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"dbae1852-8ece-4a62-8990-25abda2d9c68"},"source":["!pip install xlsxwriter\r\n","!pip install xlrd\r\n","!pip install openpyxl"],"execution_count":83,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: xlsxwriter in /usr/local/lib/python3.7/dist-packages (1.3.7)\n","Requirement already satisfied: xlrd in /usr/local/lib/python3.7/dist-packages (1.1.0)\n","Requirement already satisfied: openpyxl in /usr/local/lib/python3.7/dist-packages (2.5.9)\n","Requirement already satisfied: et-xmlfile in /usr/local/lib/python3.7/dist-packages (from openpyxl) (1.0.1)\n","Requirement already satisfied: jdcal in /usr/local/lib/python3.7/dist-packages (from openpyxl) (1.4.1)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"bhrw_bNssIaz","colab":{"base_uri":"https://localhost:8080/","height":54},"executionInfo":{"status":"ok","timestamp":1616088124997,"user_tz":-330,"elapsed":15536,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"fc55df0c-05d4-4fe5-cae9-801783c26d59"},"source":["\r\n","\"\"\"writer = pd.ExcelWriter(result_path + 'results.xlsx', engine='xlsxwriter')\r\n","df = pd.DataFrame(columns=['Model name','F1 Score','custom metric score'])\r\n","df.to_excel(writer, sheet_name='Sheet1', index=False)\r\n","writer.save()\r\n","\"\"\""],"execution_count":84,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["\"writer = pd.ExcelWriter(result_path + 'results.xlsx', engine='xlsxwriter')\\ndf = pd.DataFrame(columns=['Model name','F1 Score','custom metric score'])\\ndf.to_excel(writer, sheet_name='Sheet1', index=False)\\nwriter.save()\\n\""]},"metadata":{"tags":[]},"execution_count":84}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"QWGPx9fItZhS","executionInfo":{"status":"ok","timestamp":1616088125721,"user_tz":-330,"elapsed":16252,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"ad801ec7-82b6-4796-8f8a-b3fedfb05b11"},"source":["# run this cell without any changes only once\r\n","reader = pd.read_excel(result_path + 'results.xlsx')\r\n","reader = reader.append({'Model name':model_name, 'F1 Score': f1,'Accuracy': acc,'custom metric score': custom},ignore_index=True)\r\n","writer = pd.ExcelWriter(result_path + 'results.xlsx', engine='xlsxwriter')\r\n","reader.to_excel(writer, sheet_name='Sheet1', index=False)\r\n","writer.save()\r\n","reader"],"execution_count":85,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model name</th>\n","      <th>F1 Score</th>\n","      <th>Accuracy</th>\n","      <th>custom metric score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>baseline LightGBM</td>\n","      <td>0.686242</td>\n","      <td>0.68600</td>\n","      <td>18952</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>baseline random forest</td>\n","      <td>0.722943</td>\n","      <td>0.72250</td>\n","      <td>19352</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>baseline AdaBoost</td>\n","      <td>0.435260</td>\n","      <td>0.52825</td>\n","      <td>17746</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>baseline GradientBoost</td>\n","      <td>0.667322</td>\n","      <td>0.66850</td>\n","      <td>18729</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>baseline CatBoost</td>\n","      <td>0.680307</td>\n","      <td>0.68225</td>\n","      <td>[18871]</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>baseline LightGBM</td>\n","      <td>0.697761</td>\n","      <td>0.69650</td>\n","      <td>19029</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>baseline random forest</td>\n","      <td>0.711836</td>\n","      <td>0.71100</td>\n","      <td>19150</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>baseline AdaBoost</td>\n","      <td>0.437618</td>\n","      <td>0.52875</td>\n","      <td>17673</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>baseline GradientBoost</td>\n","      <td>0.670547</td>\n","      <td>0.67225</td>\n","      <td>18728</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>baseline CatBoost</td>\n","      <td>0.676583</td>\n","      <td>0.67775</td>\n","      <td>[18819]</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["               Model name  F1 Score  Accuracy custom metric score\n","0       baseline LightGBM  0.686242   0.68600               18952\n","1  baseline random forest  0.722943   0.72250               19352\n","2       baseline AdaBoost  0.435260   0.52825               17746\n","3  baseline GradientBoost  0.667322   0.66850               18729\n","4       baseline CatBoost  0.680307   0.68225             [18871]\n","5       baseline LightGBM  0.697761   0.69650               19029\n","6  baseline random forest  0.711836   0.71100               19150\n","7       baseline AdaBoost  0.437618   0.52875               17673\n","8  baseline GradientBoost  0.670547   0.67225               18728\n","9       baseline CatBoost  0.676583   0.67775             [18819]"]},"metadata":{"tags":[]},"execution_count":85}]},{"cell_type":"code","metadata":{"id":"iLGO1eK8jPRx","colab":{"base_uri":"https://localhost:8080/","height":336},"executionInfo":{"status":"ok","timestamp":1616088126434,"user_tz":-330,"elapsed":16957,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"d123e522-4cf5-4d9f-e76f-42a192ff45eb"},"source":["import matplotlib.pyplot as plt\r\n","\r\n","def count_hist(y_pred, y_test):\r\n","\r\n","  ''' This function display the count of the actual class labels for \r\n","      each type of the predicted class labels '''\r\n","  \r\n","  fig, ax = plt.subplots(1, 5, figsize = (20, 5))\r\n","\r\n","  class_labels = np.array([1, 2, 3, 4, 5])\r\n","  y_test = np.array(y_test)\r\n","  count_1 = np.zeros(5, dtype = np.int32)\r\n","  count_2 = np.zeros(5, dtype = np.int32)\r\n","  count_3 = np.zeros(5, dtype = np.int32)\r\n","  count_4 = np.zeros(5, dtype = np.int32)\r\n","  count_5 = np.zeros(5, dtype = np.int32)\r\n","\r\n","  for i in range(len(y_pred)):\r\n","\r\n","    if y_pred[i] == 1:\r\n","      count_1[y_test[i] - 1] = count_1[y_test[i] - 1] + 1\r\n","    if y_pred[i] == 2:\r\n","      count_2[y_test[i] - 1] = count_2[y_test[i] - 1] + 1\r\n","    if y_pred[i] == 3:\r\n","      count_3[y_test[i] - 1] = count_3[y_test[i] - 1] + 1\r\n","    if y_pred[i] == 4:\r\n","      count_4[y_test[i] - 1] = count_4[y_test[i] - 1] + 1\r\n","    if y_pred[i] == 5:\r\n","      count_5[y_test[i] - 1] = count_5[y_test[i] - 1] + 1\r\n","\r\n","  ax[0].bar(class_labels, count_1)\r\n","  ax[0].set_title(\"Counts for predicted class 1\")\r\n","  \r\n","  ax[1].bar(class_labels, count_2)\r\n","  ax[1].set_title(\"Counts for predicted class 2\")\r\n","\r\n","  ax[2].bar(class_labels, count_3)\r\n","  ax[2].set_title(\"Counts for predicted class 3\")\r\n","\r\n","  ax[3].bar(class_labels, count_4)\r\n","  ax[3].set_title(\"Counts for predicted class 4\")\r\n","\r\n","  ax[4].bar(class_labels, count_5)\r\n","  ax[4].set_title(\"Counts for predicted class 5\")\r\n","\r\n","  plt.show()\r\n","\r\n","count_hist(y_pred, y_test)"],"execution_count":86,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x360 with 5 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"HEraAwBHkY88","executionInfo":{"status":"ok","timestamp":1616088126437,"user_tz":-330,"elapsed":16955,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":[""],"execution_count":86,"outputs":[]}]}