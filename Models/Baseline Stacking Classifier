{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Baseline Stacking Classifier","provenance":[{"file_id":"1DILVF-2vcpGWDot-HCVWmnLux7JkP92J","timestamp":1616063491051},{"file_id":"1szZG4dM55a3lNquUdPLgztwvsAfq4Kgl","timestamp":1616060641020},{"file_id":"1x2udLyMCd6CaROoPkKi1lsxcbk1fg2IE","timestamp":1616060260571},{"file_id":"1JELcfkfrmYN7e96ZDxTqqGDFevmn9k9r","timestamp":1616059817461},{"file_id":"13d6eM2yKkLJu6-qSFdOhJ9I5BHqFp24m","timestamp":1616058610472},{"file_id":"1y1UyXQgM-2kCxHhEayQ_E6dRfGtNwccm","timestamp":1616058126605},{"file_id":"1fWrMRaNL7m6NXmn85Yp0nvFHZ8wBWQM3","timestamp":1616057139026}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"WaOe-nuka_8b"},"source":["Put a shortcut of the main drive link to your my drive so that the path remains the same for everyone\n"]},{"cell_type":"code","metadata":{"id":"qltkp5RHcuYV","executionInfo":{"status":"ok","timestamp":1616089175129,"user_tz":-330,"elapsed":1256,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split"],"execution_count":67,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B4Abd9gnb-bW","executionInfo":{"status":"ok","timestamp":1616089175881,"user_tz":-330,"elapsed":1998,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"0b4e64f4-4429-464b-fd74-2ce5210e6b56"},"source":["from google.colab import drive\n","drive.mount('/gdrive')"],"execution_count":68,"outputs":[{"output_type":"stream","text":["Drive already mounted at /gdrive; to attempt to forcibly remount, call drive.mount(\"/gdrive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XjTLNcBta82w","executionInfo":{"status":"ok","timestamp":1616089175882,"user_tz":-330,"elapsed":1990,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["data_path = '/gdrive/MyDrive/Open IIT DA 2021/Dataset/'\n","result_path = '/gdrive/MyDrive/Open IIT DA 2021/'\n","model_name = 'baseline Stacking Classifier'"],"execution_count":69,"outputs":[]},{"cell_type":"code","metadata":{"id":"5uoc8HT-bhxf","executionInfo":{"status":"ok","timestamp":1616089176278,"user_tz":-330,"elapsed":2379,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["train = pd.read_csv(data_path + 'train_0.csv')\n","test = pd.read_csv(data_path + 'test_0.csv') "],"execution_count":70,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3YULylSLbiMd"},"source":["# custom loss and metrics\n"]},{"cell_type":"code","metadata":{"id":"eK0skU4Tao3a","executionInfo":{"status":"ok","timestamp":1616089176278,"user_tz":-330,"elapsed":2373,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["popularity_mapper = {\n","                        'Very high': 5,\n","                        'high': 4,\n","                        'average': 3, \n","                        'low': 2, \n","                        'very low': 1\n","                     }\n","#\n","#\n","#\n","#\n","# check with no_bid = base**(-2), base**(-1), 1, base**(5), base**(6)\n","#\n","#\n","\n","def custom_loss_function(y_pred, y_true, **kwargs):\n","    # kwargs contain additional parameters\n","    # kwargs should ideally contain - \n","        # 1. base: an integer  \n","            # on which base you want to take the loss \n","        # 2. no_bid: an array (one entry for each class) of penalty for no bid \n","            # the amount of penalty you want to add to the loss \n","            # this is applicable in scenarios such as - when actual is average but you bid less than average (say low)\n","            # each class should be penalised differently - say actual is very high and your prediction was unable to bid - you loss straight 10K $\n","            # but say it was low and you predicted very low - it was mere 4K $ that you lost \n","\n","    # base is close to 1 - so that the total_loss does not explode :(\n","    base, no_bid = 1.1, None\n","    no_bid_updated = False\n","\n","    # stuffs with kwarg dictionary\n","    for key, value in list(kwargs.items()):\n","        if key == 'base':\n","            # update the base\n","            base = value\n","        elif key == 'no_bid':\n","            # update the no_bid array\n","            no_bid = value \n","            no_bid_updated = True\n","        else:\n","            # none of the required keys\n","            print('Chutiya bana rahe ho? :|\\n')\n","    \n","    # update no_bid finally if the no_bid has not been updated\n","    if not no_bid_updated:\n","        no_bid = [base**(i+1) for i in range(5)]\n","\n","    # now convert the popularity predictions into numbers\n","    converted_pred = [popularity_mapper[x] for x in y_pred]  \n","    converted_true = [popularity_mapper[x] for x in y_true]\n","\n","    # find the loss that you have incurred \n","    # there is loss incurred only if we have a different prediction than the actual popularity\n","    converted_pred_len = len(converted_pred)\n","    loss_array = [0] * converted_pred_len \n","    for i in range(converted_pred_len):\n","        if converted_pred[i] != converted_true[i]:\n","\n","            # first check if this is a no_bid situation\n","            if converted_true[i] > converted_pred[i]:\n","                loss_array[i] = no_bid[converted_bid[i] - 1]\n","\n","            else:\n","                actual_gain = converted_true[i]\n","                our_gain = (2 * actual_gain - converted_pred[i])\n","                loss_array[i] = base**(actual_gain - our_gain)\n","\n","    total_loss = sum(loss_array)\n","    return total_loss"],"execution_count":71,"outputs":[]},{"cell_type":"code","metadata":{"id":"b8IWvoWma2Kv","executionInfo":{"status":"ok","timestamp":1616089176279,"user_tz":-330,"elapsed":2369,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["def revenue(Y_test, Y_pred):\n","  Y_test = Y_test.to_numpy()\n","  revenue = 10000\n","  i = 0\n","  while i < len(Y_test) and revenue >= 0:\n","    if Y_test[i] <= Y_pred[i]:\n","      revenue += Y_test[i]*2 - Y_pred[i]\n","    i += 1\n","  return revenue "],"execution_count":72,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GfvWXPlabl5l"},"source":["# models\n"]},{"cell_type":"code","metadata":{"id":"MVtjh60mpCmq","executionInfo":{"status":"ok","timestamp":1616089176280,"user_tz":-330,"elapsed":2363,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["from numpy import mean\n","from numpy import std\n","from numpy import dstack\n","from pandas import read_csv\n","from matplotlib import pyplot\n","from sklearn.metrics import classification_report\n","from sklearn.metrics import f1_score, accuracy_score\n"],"execution_count":73,"outputs":[]},{"cell_type":"code","metadata":{"id":"09aPD7MBbqeu","executionInfo":{"status":"ok","timestamp":1616089176281,"user_tz":-330,"elapsed":2360,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["X = train.drop(['popularity'],axis=1)\n","y = train['popularity']\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=4000/len(X), random_state=69)"],"execution_count":74,"outputs":[]},{"cell_type":"code","metadata":{"id":"sN7TKL-7ukul","executionInfo":{"status":"ok","timestamp":1616089176282,"user_tz":-330,"elapsed":2357,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":["#stacking classifier\n","from sklearn.ensemble import StackingClassifier\n","from lightgbm import LGBMClassifier\n","from sklearn.ensemble import GradientBoostingClassifier\n","from sklearn.ensemble import AdaBoostClassifier\n","from xgboost import XGBClassifier\n","\n","estimator = [] \n","estimator.append(('ada_clf',AdaBoostClassifier(n_estimators=100 ,random_state=0 ,learning_rate=0.6 ,algorithm='SAMME.R' ))) \n","estimator.append(('ltb_clf', LGBMClassifier(  max_depth= 4, learning_rate=0.2, n_estimators=100,\n","                          objective='binary', min_child_samples=20, colsample_bytree=0.5, reg_alpha=1, reg_lambda=0, \n","                          random_state=0, n_jobs=- 1, importance_type='split'))) \n","estimator.append(('gb_clf', GradientBoostingClassifier(n_estimators=100, learning_rate=0.5, max_depth=1, random_state=0)))\n","\n","clf = StackingClassifier(estimators=estimator)"],"execution_count":75,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R-jySq2Cm84O","executionInfo":{"status":"ok","timestamp":1616089223812,"user_tz":-330,"elapsed":49884,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"9d73bc42-5cff-4230-db5b-fa1857bb2d24"},"source":["clf.fit(X_train, y_train)"],"execution_count":76,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["StackingClassifier(cv=None,\n","                   estimators=[('ada_clf',\n","                                AdaBoostClassifier(algorithm='SAMME.R',\n","                                                   base_estimator=None,\n","                                                   learning_rate=0.6,\n","                                                   n_estimators=100,\n","                                                   random_state=0)),\n","                               ('ltb_clf',\n","                                LGBMClassifier(boosting_type='gbdt',\n","                                               class_weight=None,\n","                                               colsample_bytree=0.5,\n","                                               importance_type='split',\n","                                               learning_rate=0.2, max_depth=4,\n","                                               min_child_samples=20,\n","                                               min_child_weight=0.001,\n","                                               min_s...\n","                                                           min_impurity_decrease=0.0,\n","                                                           min_impurity_split=None,\n","                                                           min_samples_leaf=1,\n","                                                           min_samples_split=2,\n","                                                           min_weight_fraction_leaf=0.0,\n","                                                           n_estimators=100,\n","                                                           n_iter_no_change=None,\n","                                                           presort='deprecated',\n","                                                           random_state=0,\n","                                                           subsample=1.0,\n","                                                           tol=0.0001,\n","                                                           validation_fraction=0.1,\n","                                                           verbose=0,\n","                                                           warm_start=False))],\n","                   final_estimator=None, n_jobs=None, passthrough=False,\n","                   stack_method='auto', verbose=0)"]},"metadata":{"tags":[]},"execution_count":76}]},{"cell_type":"code","metadata":{"id":"zqCg5UlYrK2M","executionInfo":{"status":"ok","timestamp":1616089223816,"user_tz":-330,"elapsed":49883,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":[" y_pred = clf.predict(X_test)"],"execution_count":77,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q9xU_HBmrRAy","executionInfo":{"status":"ok","timestamp":1616089223817,"user_tz":-330,"elapsed":49879,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"7ec8ec9c-6c76-47a1-c66a-4b842b03cc78"},"source":["print(classification_report(y_test, y_pred))"],"execution_count":78,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           1       0.84      0.79      0.82      1095\n","           2       0.54      0.70      0.61       990\n","           3       0.48      0.42      0.45       975\n","           4       0.57      0.55      0.56       814\n","           5       0.55      0.19      0.28       126\n","\n","    accuracy                           0.61      4000\n","   macro avg       0.59      0.53      0.54      4000\n","weighted avg       0.61      0.61      0.61      4000\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W14A_RV9uhBq","executionInfo":{"status":"ok","timestamp":1616089223820,"user_tz":-330,"elapsed":49880,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"979401e2-c016-47a2-b058-4c38ad7dae73"},"source":["print(f1_score(y_test,y_pred,average='weighted'))\n","f1 = f1_score(y_test,y_pred,average='weighted')"],"execution_count":79,"outputs":[{"output_type":"stream","text":["0.6057084170514077\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_LxXUlE_XmpQ","executionInfo":{"status":"ok","timestamp":1616089224188,"user_tz":-330,"elapsed":50243,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"a4e3b710-68c7-47c9-8696-0814ab65c36f"},"source":["print(accuracy_score(y_test,y_pred))\n","acc = accuracy_score(y_test,y_pred)"],"execution_count":80,"outputs":[{"output_type":"stream","text":["0.61025\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WbUPj_XurPjL","executionInfo":{"status":"ok","timestamp":1616089224189,"user_tz":-330,"elapsed":50241,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"acb97ef7-df5b-46ac-d7b0-74c55c47b0f7"},"source":[" print(revenue(y_test, y_pred))\n","custom = revenue(y_test, y_pred)"],"execution_count":81,"outputs":[{"output_type":"stream","text":["15759\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xYh5CgMAy_eJ","executionInfo":{"status":"ok","timestamp":1616089224190,"user_tz":-330,"elapsed":50238,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"69ce1d26-04ff-4bc3-a0ac-1a789d6abfaa"},"source":["max_revenue = 0\n","y_test = y_test.to_numpy()\n","for i in range(len(y_test)):\n","  max_revenue += y_test[i]\n","max_revenue += 10000\n","print(max_revenue)"],"execution_count":82,"outputs":[{"output_type":"stream","text":["19886\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"07eRRHJkssDb"},"source":["# save model"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7mInQ1eatnQy","executionInfo":{"status":"ok","timestamp":1616089232247,"user_tz":-330,"elapsed":58291,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"01db1586-a2c2-4a82-bb4b-558cbbccd5a1"},"source":["!pip install xlsxwriter\n","!pip install xlrd\n","!pip install openpyxl"],"execution_count":83,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: xlsxwriter in /usr/local/lib/python3.7/dist-packages (1.3.7)\n","Requirement already satisfied: xlrd in /usr/local/lib/python3.7/dist-packages (1.1.0)\n","Requirement already satisfied: openpyxl in /usr/local/lib/python3.7/dist-packages (2.5.9)\n","Requirement already satisfied: et-xmlfile in /usr/local/lib/python3.7/dist-packages (from openpyxl) (1.0.1)\n","Requirement already satisfied: jdcal in /usr/local/lib/python3.7/dist-packages (from openpyxl) (1.4.1)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"bhrw_bNssIaz","colab":{"base_uri":"https://localhost:8080/","height":54},"executionInfo":{"status":"ok","timestamp":1616089232251,"user_tz":-330,"elapsed":58290,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"9c09d319-0a69-4075-fedd-3515caf62efc"},"source":["\n","\"\"\"writer = pd.ExcelWriter(result_path + 'results.xlsx', engine='xlsxwriter')\n","df = pd.DataFrame(columns=['Model name','F1 Score','custom metric score'])\n","df.to_excel(writer, sheet_name='Sheet1', index=False)\n","writer.save()\n","\"\"\""],"execution_count":84,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["\"writer = pd.ExcelWriter(result_path + 'results.xlsx', engine='xlsxwriter')\\ndf = pd.DataFrame(columns=['Model name','F1 Score','custom metric score'])\\ndf.to_excel(writer, sheet_name='Sheet1', index=False)\\nwriter.save()\\n\""]},"metadata":{"tags":[]},"execution_count":84}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":708},"id":"QWGPx9fItZhS","executionInfo":{"status":"ok","timestamp":1616089232255,"user_tz":-330,"elapsed":58291,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"e2429995-be2c-476f-cd09-f9f57e6c9a23"},"source":["# run this cell without any changes only once\n","reader = pd.read_excel(result_path + 'results.xlsx')\n","reader = reader.append({'Model name':model_name, 'F1 Score': f1,'Accuracy': acc, 'custom metric score': custom},ignore_index=True)\n","writer = pd.ExcelWriter(result_path + 'results.xlsx', engine='xlsxwriter')\n","reader.to_excel(writer, sheet_name='Sheet1', index=False)\n","writer.save()\n","reader"],"execution_count":85,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model name</th>\n","      <th>F1 Score</th>\n","      <th>Accuracy</th>\n","      <th>custom metric score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>baseline LightGBM</td>\n","      <td>0.686242</td>\n","      <td>0.68600</td>\n","      <td>18952</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>baseline random forest</td>\n","      <td>0.722943</td>\n","      <td>0.72250</td>\n","      <td>19352</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>baseline AdaBoost</td>\n","      <td>0.435260</td>\n","      <td>0.52825</td>\n","      <td>17746</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>baseline GradientBoost</td>\n","      <td>0.667322</td>\n","      <td>0.66850</td>\n","      <td>18729</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>baseline CatBoost</td>\n","      <td>0.680307</td>\n","      <td>0.68225</td>\n","      <td>[18871]</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>baseline LightGBM</td>\n","      <td>0.697761</td>\n","      <td>0.69650</td>\n","      <td>19029</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>baseline random forest</td>\n","      <td>0.711836</td>\n","      <td>0.71100</td>\n","      <td>19150</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>baseline AdaBoost</td>\n","      <td>0.437618</td>\n","      <td>0.52875</td>\n","      <td>17673</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>baseline GradientBoost</td>\n","      <td>0.670547</td>\n","      <td>0.67225</td>\n","      <td>18728</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>baseline CatBoost</td>\n","      <td>0.676583</td>\n","      <td>0.67775</td>\n","      <td>[18819]</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>baseline Logistic Regression</td>\n","      <td>0.410119</td>\n","      <td>0.42425</td>\n","      <td>15832</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>baseline Stacking Classifier</td>\n","      <td>0.691776</td>\n","      <td>0.69000</td>\n","      <td>18994</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>baseline XG Boost</td>\n","      <td>0.669712</td>\n","      <td>0.67300</td>\n","      <td>18695</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>baseline XG Boost</td>\n","      <td>0.661181</td>\n","      <td>0.66525</td>\n","      <td>18653</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>baseline Logistic Regression</td>\n","      <td>0.556891</td>\n","      <td>0.56800</td>\n","      <td>18240</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>baseline Stacking Classifier</td>\n","      <td>0.690806</td>\n","      <td>0.68925</td>\n","      <td>18973</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>baseline Logistic Regression</td>\n","      <td>0.342751</td>\n","      <td>0.35275</td>\n","      <td>15083</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>baseline Stacking Classifier</td>\n","      <td>0.690944</td>\n","      <td>0.68925</td>\n","      <td>18974</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>baseline XG Boost</td>\n","      <td>0.667260</td>\n","      <td>0.67050</td>\n","      <td>18722</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>baseline XG Boost</td>\n","      <td>0.607198</td>\n","      <td>0.61325</td>\n","      <td>15666</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>baseline Stacking Classifier</td>\n","      <td>0.605708</td>\n","      <td>0.61025</td>\n","      <td>15759</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                      Model name  F1 Score  Accuracy custom metric score\n","0              baseline LightGBM  0.686242   0.68600               18952\n","1         baseline random forest  0.722943   0.72250               19352\n","2              baseline AdaBoost  0.435260   0.52825               17746\n","3         baseline GradientBoost  0.667322   0.66850               18729\n","4              baseline CatBoost  0.680307   0.68225             [18871]\n","5              baseline LightGBM  0.697761   0.69650               19029\n","6         baseline random forest  0.711836   0.71100               19150\n","7              baseline AdaBoost  0.437618   0.52875               17673\n","8         baseline GradientBoost  0.670547   0.67225               18728\n","9              baseline CatBoost  0.676583   0.67775             [18819]\n","10  baseline Logistic Regression  0.410119   0.42425               15832\n","11  baseline Stacking Classifier  0.691776   0.69000               18994\n","12             baseline XG Boost  0.669712   0.67300               18695\n","13             baseline XG Boost  0.661181   0.66525               18653\n","14  baseline Logistic Regression  0.556891   0.56800               18240\n","15  baseline Stacking Classifier  0.690806   0.68925               18973\n","16  baseline Logistic Regression  0.342751   0.35275               15083\n","17  baseline Stacking Classifier  0.690944   0.68925               18974\n","18             baseline XG Boost  0.667260   0.67050               18722\n","19             baseline XG Boost  0.607198   0.61325               15666\n","20  baseline Stacking Classifier  0.605708   0.61025               15759"]},"metadata":{"tags":[]},"execution_count":85}]},{"cell_type":"code","metadata":{"id":"iLGO1eK8jPRx","colab":{"base_uri":"https://localhost:8080/","height":336},"executionInfo":{"status":"ok","timestamp":1616089233022,"user_tz":-330,"elapsed":59055,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}},"outputId":"8cb47ff8-5e60-4e4d-8a8d-ad03fd3afede"},"source":["import matplotlib.pyplot as plt\n","\n","def count_hist(y_pred, y_test):\n","\n","  ''' This function display the count of the actual class labels for \n","      each type of the predicted class labels '''\n","  \n","  fig, ax = plt.subplots(1, 5, figsize = (20, 5))\n","\n","  class_labels = np.array([1, 2, 3, 4, 5])\n","  y_test = np.array(y_test)\n","  count_1 = np.zeros(5, dtype = np.int32)\n","  count_2 = np.zeros(5, dtype = np.int32)\n","  count_3 = np.zeros(5, dtype = np.int32)\n","  count_4 = np.zeros(5, dtype = np.int32)\n","  count_5 = np.zeros(5, dtype = np.int32)\n","\n","  for i in range(len(y_pred)):\n","\n","    if y_pred[i] == 1:\n","      count_1[y_test[i] - 1] = count_1[y_test[i] - 1] + 1\n","    if y_pred[i] == 2:\n","      count_2[y_test[i] - 1] = count_2[y_test[i] - 1] + 1\n","    if y_pred[i] == 3:\n","      count_3[y_test[i] - 1] = count_3[y_test[i] - 1] + 1\n","    if y_pred[i] == 4:\n","      count_4[y_test[i] - 1] = count_4[y_test[i] - 1] + 1\n","    if y_pred[i] == 5:\n","      count_5[y_test[i] - 1] = count_5[y_test[i] - 1] + 1\n","\n","  ax[0].bar(class_labels, count_1)\n","  ax[0].set_title(\"Counts for predicted class 1\")\n","  \n","  ax[1].bar(class_labels, count_2)\n","  ax[1].set_title(\"Counts for predicted class 2\")\n","\n","  ax[2].bar(class_labels, count_3)\n","  ax[2].set_title(\"Counts for predicted class 3\")\n","\n","  ax[3].bar(class_labels, count_4)\n","  ax[3].set_title(\"Counts for predicted class 4\")\n","\n","  ax[4].bar(class_labels, count_5)\n","  ax[4].set_title(\"Counts for predicted class 5\")\n","\n","  plt.show()\n","\n","count_hist(y_pred, y_test)"],"execution_count":86,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x360 with 5 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"HEraAwBHkY88","executionInfo":{"status":"ok","timestamp":1616089233025,"user_tz":-330,"elapsed":59055,"user":{"displayName":"Srinivas Iyengar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhoJYDuLaTNiadtCMHF1Pl8axmlxGocxJLsORHj1w=s64","userId":"00347690177016731000"}}},"source":[""],"execution_count":86,"outputs":[]}]}