{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Baseline rfc Dataset2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"WaOe-nuka_8b"},"source":["Put a shortcut of the main drive link to your my drive so that the path remains the same for everyone\r\n"]},{"cell_type":"code","metadata":{"id":"qltkp5RHcuYV","executionInfo":{"status":"ok","timestamp":1616048993196,"user_tz":-330,"elapsed":2090,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}}},"source":["import pandas as pd\r\n","import numpy as np\r\n","from sklearn.ensemble import RandomForestClassifier\r\n","from sklearn.model_selection import train_test_split"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B4Abd9gnb-bW","executionInfo":{"status":"ok","timestamp":1616049047717,"user_tz":-330,"elapsed":56582,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}},"outputId":"5082f085-5701-4805-b74a-897d681e5c38"},"source":["from google.colab import drive\n","drive.mount('/gdrive')"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Mounted at /gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XjTLNcBta82w","executionInfo":{"status":"ok","timestamp":1616049132803,"user_tz":-330,"elapsed":1387,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}}},"source":["data_path = '/gdrive/MyDrive/Open IIT DA 2021/Dataset/'\r\n","result_path = '/gdrive/MyDrive/Open IIT DA 2021/'\r\n","model_name = 'baseline random forest dataset_2'"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"id":"5uoc8HT-bhxf","executionInfo":{"status":"ok","timestamp":1616049401862,"user_tz":-330,"elapsed":1359,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}}},"source":["train = pd.read_csv(data_path + 'Train_data_2.csv')\r\n","test = pd.read_csv(data_path + 'Test_data_2.csv') \r\n","test_id = pd.read_csv(data_path + 'Test_data.csv') "],"execution_count":23,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3YULylSLbiMd"},"source":["# custom loss and metrics\r\n"]},{"cell_type":"code","metadata":{"id":"eK0skU4Tao3a","executionInfo":{"status":"ok","timestamp":1616049058583,"user_tz":-330,"elapsed":811,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}}},"source":["popularity_mapper = {\r\n","                        'Very high': 5,\r\n","                        'high': 4,\r\n","                        'average': 3, \r\n","                        'low': 2, \r\n","                        'very low': 1\r\n","                     }\r\n","#\r\n","#\r\n","#\r\n","#\r\n","# check with no_bid = base**(-2), base**(-1), 1, base**(5), base**(6)\r\n","#\r\n","#\r\n","\r\n","def custom_loss_function(y_pred, y_true, **kwargs):\r\n","    # kwargs contain additional parameters\r\n","    # kwargs should ideally contain - \r\n","        # 1. base: an integer  \r\n","            # on which base you want to take the loss \r\n","        # 2. no_bid: an array (one entry for each class) of penalty for no bid \r\n","            # the amount of penalty you want to add to the loss \r\n","            # this is applicable in scenarios such as - when actual is average but you bid less than average (say low)\r\n","            # each class should be penalised differently - say actual is very high and your prediction was unable to bid - you loss straight 10K $\r\n","            # but say it was low and you predicted very low - it was mere 4K $ that you lost \r\n","\r\n","    # base is close to 1 - so that the total_loss does not explode :(\r\n","    base, no_bid = 1.1, None\r\n","    no_bid_updated = False\r\n","\r\n","    # stuffs with kwarg dictionary\r\n","    for key, value in list(kwargs.items()):\r\n","        if key == 'base':\r\n","            # update the base\r\n","            base = value\r\n","        elif key == 'no_bid':\r\n","            # update the no_bid array\r\n","            no_bid = value \r\n","            no_bid_updated = True\r\n","        else:\r\n","            # none of the required keys\r\n","            print('Chutiya bana rahe ho? :|\\n')\r\n","    \r\n","    # update no_bid finally if the no_bid has not been updated\r\n","    if not no_bid_updated:\r\n","        no_bid = [base**(i+1) for i in range(5)]\r\n","\r\n","    # now convert the popularity predictions into numbers\r\n","    converted_pred = [popularity_mapper[x] for x in y_pred]  \r\n","    converted_true = [popularity_mapper[x] for x in y_true]\r\n","\r\n","    # find the loss that you have incurred \r\n","    # there is loss incurred only if we have a different prediction than the actual popularity\r\n","    converted_pred_len = len(converted_pred)\r\n","    loss_array = [0] * converted_pred_len \r\n","    for i in range(converted_pred_len):\r\n","        if converted_pred[i] != converted_true[i]:\r\n","\r\n","            # first check if this is a no_bid situation\r\n","            if converted_true[i] > converted_pred[i]:\r\n","                loss_array[i] = no_bid[converted_bid[i] - 1]\r\n","\r\n","            else:\r\n","                actual_gain = converted_true[i]\r\n","                our_gain = (2 * actual_gain - converted_pred[i])\r\n","                loss_array[i] = base**(actual_gain - our_gain)\r\n","\r\n","    total_loss = sum(loss_array)\r\n","    return total_loss"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"b8IWvoWma2Kv","executionInfo":{"status":"ok","timestamp":1616049060684,"user_tz":-330,"elapsed":788,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}}},"source":["def revenue(Y_test, Y_pred):\r\n","  Y_test = Y_test.to_numpy()\r\n","  revenue = 10000\r\n","  i = 0\r\n","  while i < len(Y_test) and revenue >= 0:\r\n","    if Y_test[i] <= Y_pred[i]:\r\n","      revenue += Y_test[i]*2 - Y_pred[i]\r\n","    i += 1\r\n","  return revenue "],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GfvWXPlabl5l"},"source":["# models\r\n"]},{"cell_type":"code","metadata":{"id":"MVtjh60mpCmq","executionInfo":{"status":"ok","timestamp":1616049066150,"user_tz":-330,"elapsed":1350,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}}},"source":["from numpy import mean\r\n","from numpy import std\r\n","from numpy import dstack\r\n","from pandas import read_csv\r\n","from matplotlib import pyplot\r\n","from sklearn.metrics import classification_report\r\n","from sklearn.metrics import f1_score\r\n"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"09aPD7MBbqeu","executionInfo":{"status":"ok","timestamp":1616049625306,"user_tz":-330,"elapsed":1540,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}}},"source":["X = train.drop(['popularity'],axis=1)\r\n","y = train['popularity']\r\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=4000/len(X), random_state=69)"],"execution_count":30,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R-jySq2Cm84O","executionInfo":{"status":"ok","timestamp":1616049628386,"user_tz":-330,"elapsed":4283,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}},"outputId":"9c6b5d89-c549-4cb9-ff4f-0912df4f0521"},"source":["clf = RandomForestClassifier(random_state=69, n_jobs=-1)\r\n","clf.fit(X_train, y_train)"],"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='gini', max_depth=None, max_features='auto',\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=100,\n","                       n_jobs=-1, oob_score=False, random_state=69, verbose=0,\n","                       warm_start=False)"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"code","metadata":{"id":"zqCg5UlYrK2M","executionInfo":{"status":"ok","timestamp":1616049628388,"user_tz":-330,"elapsed":4021,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}}},"source":["y_pred = clf.predict(X_test)"],"execution_count":32,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q9xU_HBmrRAy","executionInfo":{"status":"ok","timestamp":1616049628391,"user_tz":-330,"elapsed":3708,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}},"outputId":"18ebca49-b500-456e-e30d-6a65b81a6f3f"},"source":["print(classification_report(y_test, y_pred))"],"execution_count":33,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           1       0.85      0.82      0.84       800\n","           2       0.59      0.65      0.62       825\n","           3       0.54      0.52      0.53       774\n","           4       0.69      0.66      0.68       764\n","           5       0.94      0.94      0.94       837\n","\n","    accuracy                           0.72      4000\n","   macro avg       0.72      0.72      0.72      4000\n","weighted avg       0.72      0.72      0.72      4000\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W14A_RV9uhBq","executionInfo":{"status":"ok","timestamp":1616049628393,"user_tz":-330,"elapsed":3470,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}},"outputId":"6a388936-ccdf-4eb1-8ed7-39ce373eb318"},"source":["print(f1_score(y_test,y_pred,average='weighted'))\r\n","f1 = f1_score(y_test,y_pred,average='weighted')"],"execution_count":34,"outputs":[{"output_type":"stream","text":["0.7229430105109285\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WbUPj_XurPjL","executionInfo":{"status":"ok","timestamp":1616049628395,"user_tz":-330,"elapsed":3182,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}},"outputId":"e1497155-1f1e-4935-cfd4-3c1769b46d22"},"source":[" print(revenue(y_test, y_pred))\r\n","custom = revenue(y_test, y_pred)"],"execution_count":35,"outputs":[{"output_type":"stream","text":["19352\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qiHWA9GWEGXK","executionInfo":{"status":"ok","timestamp":1616049690739,"user_tz":-330,"elapsed":1262,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}},"outputId":"b8beaee1-7f8c-42f9-8a70-59083eb14ef1"},"source":["y_pred=pd.DataFrame(y_pred)\r\n","y_pred.value_counts()"],"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2    916\n","5    840\n","1    774\n","3    737\n","4    733\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2OQZHFybEJHH","executionInfo":{"status":"ok","timestamp":1616049713001,"user_tz":-330,"elapsed":1728,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}},"outputId":"acda2dd0-9485-42c8-e535-8526bb582e96"},"source":["y_test=pd.DataFrame(y_test)\r\n","y_test.value_counts()"],"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5    837\n","2    825\n","1    800\n","3    774\n","4    764\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xWTT9ds8Ed7N","executionInfo":{"status":"ok","timestamp":1616049765535,"user_tz":-330,"elapsed":1416,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}},"outputId":"342c6c8f-17ee-4c6f-976d-134c7a96b85f"},"source":["from sklearn.metrics import confusion_matrix\r\n","print(confusion_matrix(y_test, y_pred))"],"execution_count":40,"outputs":[{"output_type":"stream","text":["[[660  68  17  51   4]\n"," [ 81 536 197  10   1]\n"," [ 20 230 400 124   0]\n"," [ 13  79 117 507  48]\n"," [  0   3   6  41 787]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xYh5CgMAy_eJ","executionInfo":{"status":"ok","timestamp":1616049628397,"user_tz":-330,"elapsed":2601,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}},"outputId":"769d4c98-a9e1-4023-83ed-8fc17b7494ac"},"source":["max_revenue = 0\r\n","y_test = y_test.to_numpy()\r\n","for i in range(len(y_test)):\r\n","  max_revenue += y_test[i]\r\n","max_revenue += 10000\r\n","print(max_revenue)"],"execution_count":36,"outputs":[{"output_type":"stream","text":["22013\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"P6ZMX6bxCbO6"},"source":["#test predictions"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-OVFXjuhCovO","executionInfo":{"status":"ok","timestamp":1616049424287,"user_tz":-330,"elapsed":1355,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}},"outputId":"1ea35b93-f290-420a-9549-25e009d38e75"},"source":["y_pred = clf.predict(test)\r\n","test.shape"],"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4000, 20)"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qj76bMrODgYK","executionInfo":{"status":"ok","timestamp":1616049477694,"user_tz":-330,"elapsed":1799,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}},"outputId":"ce7f9550-0da1-48d9-c6f6-ae67d655c4e9"},"source":["y_pred"],"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([4, 1, 1, ..., 1, 4, 1])"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":147},"id":"XMSILwh_DUWQ","executionInfo":{"status":"ok","timestamp":1616049502191,"user_tz":-330,"elapsed":1297,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}},"outputId":"8b9cf523-17f4-4cc9-ca80-0f6d9fb23c5c"},"source":["test_id['popularity']=0\r\n","test_id.head(2)"],"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>acousticness</th>\n","      <th>danceability</th>\n","      <th>energy</th>\n","      <th>explicit</th>\n","      <th>instrumentalness</th>\n","      <th>key</th>\n","      <th>liveness</th>\n","      <th>loudness</th>\n","      <th>mode</th>\n","      <th>release_date</th>\n","      <th>speechiness</th>\n","      <th>tempo</th>\n","      <th>valence</th>\n","      <th>year</th>\n","      <th>duration-min</th>\n","      <th>popularity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4943</td>\n","      <td>0.0336</td>\n","      <td>0.523</td>\n","      <td>0.861</td>\n","      <td>No</td>\n","      <td>0.000000</td>\n","      <td>0</td>\n","      <td>0.1440</td>\n","      <td>-3.447</td>\n","      <td>Major</td>\n","      <td>01-01-2014</td>\n","      <td>0.0644</td>\n","      <td>127.049</td>\n","      <td>0.346</td>\n","      <td>2014</td>\n","      <td>3.8</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>16165</td>\n","      <td>0.7650</td>\n","      <td>0.687</td>\n","      <td>0.453</td>\n","      <td>No</td>\n","      <td>0.000008</td>\n","      <td>7</td>\n","      <td>0.0897</td>\n","      <td>-11.649</td>\n","      <td>Major</td>\n","      <td>01-04-1972</td>\n","      <td>0.0335</td>\n","      <td>129.987</td>\n","      <td>0.830</td>\n","      <td>1972</td>\n","      <td>3.8</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      id  acousticness  danceability  ...  year duration-min  popularity\n","0   4943        0.0336         0.523  ...  2014          3.8           0\n","1  16165        0.7650         0.687  ...  1972          3.8           0\n","\n","[2 rows x 17 columns]"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":110},"id":"JAsXlAv4DW5b","executionInfo":{"status":"ok","timestamp":1616049546669,"user_tz":-330,"elapsed":1291,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}},"outputId":"4afb5014-0595-48dc-da05-3818d8de1e57"},"source":["predicted=test_id[['id','popularity']].copy()\r\n","predicted['popularity']=y_pred\r\n","predicted.head(2)"],"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>popularity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4943</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>16165</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      id  popularity\n","0   4943           4\n","1  16165           1"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l5zNJNSfD71j","executionInfo":{"status":"ok","timestamp":1616049602972,"user_tz":-330,"elapsed":1427,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}},"outputId":"f81cf516-6e20-4298-cfc7-a13311b55bf6"},"source":["predicted.popularity.value_counts()"],"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    2629\n","4    1074\n","5     297\n","Name: popularity, dtype: int64"]},"metadata":{"tags":[]},"execution_count":29}]},{"cell_type":"code","metadata":{"id":"gi010lgZCuiy","executionInfo":{"status":"ok","timestamp":1616050510334,"user_tz":-330,"elapsed":1334,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}}},"source":["predicted['popularity']=predicted['popularity'].replace({1:'very low',2:'low',3:'average',4:'high',5:'very high'})\r\n","predicted.to_csv(result_path + '/Saved Predictions/baseline_rfc_2.csv',index=False)"],"execution_count":44,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"07eRRHJkssDb"},"source":["# save model"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7mInQ1eatnQy","executionInfo":{"status":"ok","timestamp":1616049106599,"user_tz":-330,"elapsed":10298,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}},"outputId":"a753a989-da74-472e-ba4c-f3e17928a1e6"},"source":["!pip install xlsxwriter\r\n","!pip install xlrd\r\n","!pip install openpyxl"],"execution_count":15,"outputs":[{"output_type":"stream","text":["Collecting xlsxwriter\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/6b/41/bf1aae04932d1eaffee1fc5f8b38ca47bbbf07d765129539bc4bcce1ce0c/XlsxWriter-1.3.7-py2.py3-none-any.whl (144kB)\n","\r\u001b[K     |██▎                             | 10kB 12.1MB/s eta 0:00:01\r\u001b[K     |████▌                           | 20kB 8.3MB/s eta 0:00:01\r\u001b[K     |██████▉                         | 30kB 10.8MB/s eta 0:00:01\r\u001b[K     |█████████                       | 40kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████▎                    | 51kB 14.6MB/s eta 0:00:01\r\u001b[K     |█████████████▋                  | 61kB 16.1MB/s eta 0:00:01\r\u001b[K     |███████████████▉                | 71kB 10.7MB/s eta 0:00:01\r\u001b[K     |██████████████████▏             | 81kB 10.6MB/s eta 0:00:01\r\u001b[K     |████████████████████▍           | 92kB 10.9MB/s eta 0:00:01\r\u001b[K     |██████████████████████▋         | 102kB 11.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████████       | 112kB 11.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▏    | 122kB 11.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▌  | 133kB 11.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▊| 143kB 11.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 153kB 11.4MB/s \n","\u001b[?25hInstalling collected packages: xlsxwriter\n","Successfully installed xlsxwriter-1.3.7\n","Requirement already satisfied: xlrd in /usr/local/lib/python3.7/dist-packages (1.1.0)\n","Requirement already satisfied: openpyxl in /usr/local/lib/python3.7/dist-packages (2.5.9)\n","Requirement already satisfied: jdcal in /usr/local/lib/python3.7/dist-packages (from openpyxl) (1.4.1)\n","Requirement already satisfied: et-xmlfile in /usr/local/lib/python3.7/dist-packages (from openpyxl) (1.0.1)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"bhrw_bNssIaz"},"source":["\r\n","\"\"\"writer = pd.ExcelWriter(result_path + 'results.xlsx', engine='xlsxwriter')\r\n","df = pd.DataFrame(columns=['Model name','F1 Score','custom metric score'])\r\n","df.to_excel(writer, sheet_name='Sheet1', index=False)\r\n","writer.save()\r\n","\"\"\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":110},"id":"QWGPx9fItZhS","executionInfo":{"status":"ok","timestamp":1616049140670,"user_tz":-330,"elapsed":1407,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}},"outputId":"74400471-bcf2-4b81-a252-765f2686b4cc"},"source":["# run this cell without any changes only once\r\n","reader = pd.read_excel(result_path + 'results.xlsx')\r\n","reader = reader.append({'Model name':model_name, 'F1 Score': f1, 'custom metric score': custom},ignore_index=True)\r\n","writer = pd.ExcelWriter(result_path + 'results.xlsx', engine='xlsxwriter')\r\n","reader.to_excel(writer, sheet_name='Sheet1', index=False)\r\n","writer.save()\r\n","reader"],"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model name</th>\n","      <th>F1 Score</th>\n","      <th>custom metric score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>baseline random forest</td>\n","      <td>0.706812</td>\n","      <td>19223</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>baseline random forest dataset_2</td>\n","      <td>0.722943</td>\n","      <td>19352</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                         Model name  F1 Score  custom metric score\n","0            baseline random forest  0.706812                19223\n","1  baseline random forest dataset_2  0.722943                19352"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"iLGO1eK8jPRx","colab":{"base_uri":"https://localhost:8080/","height":336},"executionInfo":{"status":"ok","timestamp":1616049156268,"user_tz":-330,"elapsed":1905,"user":{"displayName":"Mansi Uniyal","photoUrl":"","userId":"10160698024519263995"}},"outputId":"52601887-70e3-4058-d674-be2e961342bc"},"source":["import matplotlib.pyplot as plt\r\n","\r\n","def count_hist(y_pred, y_test):\r\n","\r\n","  ''' This function display the count of the actual class labels for \r\n","      each type of the predicted class labels '''\r\n","  \r\n","  fig, ax = plt.subplots(1, 5, figsize = (20, 5))\r\n","\r\n","  class_labels = np.array([1, 2, 3, 4, 5])\r\n","  y_test = np.array(y_test)\r\n","  count_1 = np.zeros(5, dtype = np.int32)\r\n","  count_2 = np.zeros(5, dtype = np.int32)\r\n","  count_3 = np.zeros(5, dtype = np.int32)\r\n","  count_4 = np.zeros(5, dtype = np.int32)\r\n","  count_5 = np.zeros(5, dtype = np.int32)\r\n","\r\n","  for i in range(len(y_pred)):\r\n","\r\n","    if y_pred[i] == 1:\r\n","      count_1[y_test[i] - 1] = count_1[y_test[i] - 1] + 1\r\n","    if y_pred[i] == 2:\r\n","      count_2[y_test[i] - 1] = count_2[y_test[i] - 1] + 1\r\n","    if y_pred[i] == 3:\r\n","      count_3[y_test[i] - 1] = count_3[y_test[i] - 1] + 1\r\n","    if y_pred[i] == 4:\r\n","      count_4[y_test[i] - 1] = count_4[y_test[i] - 1] + 1\r\n","    if y_pred[i] == 5:\r\n","      count_5[y_test[i] - 1] = count_5[y_test[i] - 1] + 1\r\n","\r\n","  ax[0].bar(class_labels, count_1)\r\n","  ax[0].set_title(\"Counts for predicted class 1\")\r\n","  \r\n","  ax[1].bar(class_labels, count_2)\r\n","  ax[1].set_title(\"Counts for predicted class 2\")\r\n","\r\n","  ax[2].bar(class_labels, count_3)\r\n","  ax[2].set_title(\"Counts for predicted class 3\")\r\n","\r\n","  ax[3].bar(class_labels, count_4)\r\n","  ax[3].set_title(\"Counts for predicted class 4\")\r\n","\r\n","  ax[4].bar(class_labels, count_5)\r\n","  ax[4].set_title(\"Counts for predicted class 5\")\r\n","\r\n","  plt.show()\r\n","\r\n","count_hist(y_pred, y_test)"],"execution_count":18,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x360 with 5 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"T32bF7KaCSi2"},"source":[""],"execution_count":null,"outputs":[]}]}